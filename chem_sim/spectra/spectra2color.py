def spectrum_to_xyz(wavelengths, absorptances):
    cie_colour_match = [
        [0.0014, 0.0000, 0.0065], [0.0022, 0.0001, 0.0105], [0.0042, 0.0001, 0.0201],
        [0.0076, 0.0002, 0.0362], [0.0143, 0.0004, 0.0679], [0.0232, 0.0006, 0.1102],
        [0.0435, 0.0012, 0.2074], [0.0776, 0.0022, 0.3713], [0.1344, 0.0040, 0.6456],
        [0.2148, 0.0073, 1.0391], [0.2839, 0.0116, 1.3856], [0.3285, 0.0168, 1.6230],
        [0.3483, 0.0230, 1.7471], [0.3481, 0.0298, 1.7826], [0.3362, 0.0380, 1.7721],
        [0.3187, 0.0480, 1.7441], [0.2908, 0.0600, 1.6692], [0.2511, 0.0739, 1.5281],
        [0.1954, 0.0910, 1.2876], [0.1421, 0.1126, 1.0419], [0.0956, 0.1390, 0.8130],
        [0.0580, 0.1693, 0.6162], [0.0320, 0.2080, 0.4652], [0.0147, 0.2586, 0.3533],
        [0.0049, 0.3230, 0.2720], [0.0024, 0.4073, 0.2123], [0.0093, 0.5030, 0.1582],
        [0.0291, 0.6082, 0.1117], [0.0633, 0.7100, 0.0782], [0.1096, 0.7932, 0.0573],
        [0.1655, 0.8620, 0.0422], [0.2257, 0.9149, 0.0298], [0.2904, 0.9540, 0.0203],
        [0.3597, 0.9803, 0.0134], [0.4334, 0.9950, 0.0087], [0.5121, 1.0000, 0.0057],
        [0.5945, 0.9950, 0.0039], [0.6784, 0.9786, 0.0027], [0.7621, 0.9520, 0.0021],
        [0.8425, 0.9154, 0.0018], [0.9163, 0.8700, 0.0017], [0.9786, 0.8163, 0.0014],
        [1.0263, 0.7570, 0.0011], [1.0567, 0.6949, 0.0010], [1.0622, 0.6310, 0.0008],
        [1.0456, 0.5668, 0.0006], [1.0026, 0.5030, 0.0003], [0.9384, 0.4412, 0.0002],
        [0.8544, 0.3810, 0.0002], [0.7514, 0.3210, 0.0001], [0.6424, 0.2650, 0.0000],
        [0.5419, 0.2170, 0.0000], [0.4479, 0.1750, 0.0000], [0.3608, 0.1382, 0.0000],
        [0.2835, 0.1070, 0.0000], [0.2187, 0.0816, 0.0000], [0.1649, 0.0610, 0.0000],
        [0.1212, 0.0446, 0.0000], [0.0874, 0.0320, 0.0000], [0.0636, 0.0232, 0.0000],
        [0.0468, 0.0170, 0.0000], [0.0329, 0.0119, 0.0000], [0.0227, 0.0082, 0.0000],
        [0.0158, 0.0057, 0.0000], [0.0114, 0.0041, 0.0000], [0.0081, 0.0029, 0.0000],
        [0.0058, 0.0021, 0.0000], [0.0041, 0.0015, 0.0000], [0.0029, 0.0010, 0.0000],
        [0.0020, 0.0007, 0.0000], [0.0014, 0.0005, 0.0000], [0.0010, 0.0004, 0.0000],
        [0.0007, 0.0002, 0.0000], [0.0005, 0.0002, 0.0000], [0.0003, 0.0001, 0.0000],
        [0.0002, 0.0001, 0.0000], [0.0002, 0.0001, 0.0000], [0.0001, 0.0000, 0.0000],
        [0.0001, 0.0000, 0.0000], [0.0001, 0.0000, 0.0000], [0.0000, 0.0000, 0.0000]
    ]

    X, Y, Z = 0, 0, 0

    for i in range(len(cie_colour_match)):
        lambda_ = 380 + i * 5
        Me = interpol(wavelengths, absorptances, lambda_)
        if Me is not None:  # Check if interpolation succeeded
            X += Me * cie_colour_match[i][0]
            Y += Me * cie_colour_match[i][1]
            Z += Me * cie_colour_match[i][2]

    XYZ = X + Y + Z
    x, y, z = X / XYZ, Y / XYZ, Z / XYZ
    return x, y, z


def interpol(wavelengths, absorptances, target_wavelength):
    for i in range(len(wavelengths) - 1):
        if wavelengths[i] <= target_wavelength <= wavelengths[i + 1]:
            # Linear interpolation
            frac = (target_wavelength - wavelengths[i]) / (wavelengths[i + 1] - wavelengths[i])
            return absorptances[i] + frac * (absorptances[i + 1] - absorptances[i])
    return None  # Return None if target_wavelength is outside the given range


def xyz_to_rgb(cs, xc, yc, zc):
    xr, yr, zr = cs['xRed'], cs['yRed'], 1 - (cs['xRed'] + cs['yRed'])
    xg, yg, zg = cs['xGreen'], cs['yGreen'], 1 - (cs['xGreen'] + cs['yGreen'])
    xb, yb, zb = cs['xBlue'], cs['yBlue'], 1 - (cs['xBlue'] + cs['yBlue'])

    xw, yw, zw = cs['xWhite'], cs['yWhite'], 1 - (cs['xWhite'] + cs['yWhite'])

    # xyz -> rgb matrix, before scaling to white.
    rx = (yg * zb) - (yb * zg)
    ry = (xb * zg) - (xg * zb)
    rz = (xg * yb) - (xb * yg)

    gx = (yb * zr) - (yr * zb)
    gy = (xr * zb) - (xb * zr)
    gz = (xb * yr) - (xr * yb)

    bx = (yr * zg) - (yg * zr)
    by = (xg * zr) - (xr * zg)
    bz = (xr * yg) - (xg * yr)

    # White scaling factors.
    # Dividing by yw scales the white luminance to unity, as conventional.
    rw = ((rx * xw) + (ry * yw) + (rz * zw)) / yw
    gw = ((gx * xw) + (gy * yw) + (gz * zw)) / yw
    bw = ((bx * xw) + (by * yw) + (bz * zw)) / yw

    # xyz -> rgb matrix, correctly scaled to white.
    rx = rx / rw
    ry = ry / rw
    rz = rz / rw

    gx = gx / gw
    gy = gy / gw
    gz = gz / gw

    bx = bx / bw
    by = by / bw
    bz = bz / bw

    # rgb of the desired point
    r = (rx * xc) + (ry * yc) + (rz * zc)
    g = (gx * xc) + (gy * yc) + (gz * zc)
    b = (bx * xc) + (by * yc) + (bz * zc)

    return r, g, b


def edit_rgb(r, g, b):
    # Amount of white needed is w = - min(0, r, g, b)
    w = min(0, r, g, b)

    # Add just enough white to make r, g, b all positive.
    if w < 0:
        r += abs(w)
        g += abs(w)
        b += abs(w)
    greatest = max(r, g, b)

    if greatest > 0:
        r /= greatest
        g /= greatest
        b /= greatest

    return int(r * 255), int(g * 255), int(b * 255)


def spectrum_to_rgb(wavelengths, absorptances, cs):
    x, y, z = spectrum_to_xyz(wavelengths, absorptances)
    r, g, b = xyz_to_rgb(cs, x, y, z)
    r, g, b = edit_rgb(r, g, b)
    return [r, g, b]


# 示例输入

cs = {'xRed': 0.630, 'yRed': 0.340,
      'xGreen': 0.310, 'yGreen': 0.595,
      'xBlue': 0.155, 'yBlue': 0.070,
      'xWhite': 0.3291, 'yWhite': 0.3291
      }
wavelengths = [380., 385., 390., 395., 400., 405., 410., 415., 420., 425., 430., 435., 440., 445., 450., 455., 460., 465., 470., 475., 480., 485., 490., 495., 500., 505., 510., 515., 520., 525., 530., 535., 540., 545., 550., 555., 560., 565., 570., 575., 580., 585., 590., 595., 600., 605., 610., 615., 620., 625., 630., 635., 640., 645., 650., 655., 660., 665., 670., 675., 680., 685., 690., 695., 700., 705., 710., 715., 720., 725., 730., 735., 740., 745., 750., 755., 760., 765., 770., 775., 780.]
absorb = [1.94992043e-17, 4.88354311e-17, 1.19362542e-16, 2.84985347e-16, 6.65249482e-16, 1.51957110e-15, 3.39923272e-15, 7.45240025e-15, 1.60244433e-14, 3.38175683e-14, 7.00908776e-14, 1.42762480e-13, 2.85931094e-13, 5.63446691e-13, 1.09301646e-12, 2.08838579e-12, 3.93208305e-12, 7.29912665e-12, 1.33645641e-11, 2.41471198e-11, 4.30710510e-11, 7.58735752e-11, 1.32053137e-10, 2.27154472e-10, 3.86334120e-10, 6.49864293e-10, 1.08154073e-09, 1.78139757e-09, 2.90474799e-09, 4.69042819e-09, 7.50230867e-09, 1.18897618e-08, 1.86749809e-08, 2.90780171e-08, 4.48943670e-08, 6.87452010e-08, 1.04427234e-07, 1.57398262e-07, 2.35446071e-07, 3.49603470e-07, 5.15391399e-07, 7.54496464e-07, 1.09701998e-06, 1.58447420e-06, 2.27374920e-06, 3.24233371e-06, 4.59514569e-06, 6.47341853e-06, 9.06619713e-06, 1.26251303e-05, 1.74834042e-05, 2.40798518e-05, 3.29894998e-05, 4.49620828e-05, 6.09703720e-05, 8.22705371e-05, 1.10477196e-04, 1.47656316e-04, 1.96439708e-04, 2.60165553e-04, 3.43050151e-04, 4.50397002e-04, 5.88850322e-04, 7.66701270e-04, 9.94256443e-04, 1.28427970e-03, 1.65251996e-03, 2.11833959e-03, 2.70545989e-03, 3.44284255e-03, 4.36572857e-03, 5.51685872e-03, 6.94790282e-03, 8.72112843e-03, 1.09113433e-02, 1.36081494e-02, 1.69185520e-02, 2.09699700e-02, 2.59137000e-02, 3.19288927e-02, 3.92271041e-02]

color = spectrum_to_rgb(wavelengths, absorb, cs)
print(color)
