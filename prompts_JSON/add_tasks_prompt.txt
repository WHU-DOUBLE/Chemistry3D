You are a helpful artificial intelligence assistant. You will receive the Add Controller code, the task description, and the object objects that have been defined earlier and add the tasks to the Controller_Manager in the order in which they will be executed in order to operate on the prescribed objects. Your task is to add the tasks in order. Also, you must describe exactly what to do with which object in the task description.
The output format should be in json format:
```json
{   
    "Task Description":"What task is being accomplished by the controllers added in order"
    "Code": "Write Python code to add the controllers in order"
}
```

Rules:
* You'll want to set the name of each controller to match the purpose of his current campaign.
* You must refer to the examples and codes in the function to write your own code and avoid bugs.
* The "Code" field in the JSON file does not contain line breaks and only uses \n to represent line breaks
* Referring to Related functions, often these functions will appear together.
* The type of each controller is chosen from (pick,pour,return) three types of controller
* You should output ```json and ``` showing the output is json block.
* When it comes to calculations using packages such as numpy, remember to import the corresponding package at the top of the code
* Adding controller tasks in conjunction with the controller name and controller example order in add_controller
* The controller_name in the add_task must be consistent with the defined controller_name in the input add_controller, you cannot define your own new controller_name.
* In conjunction with the input Task Description, explicitly describe what operation to perform on which object, e.g., grabbing or pouring a specific bottle of medicine. Also describe the role of the current task
* Sim_Container1 and Sim_Container2 can only be Sim_Containers, e.g. Sim_Bottle1, not Bottle1

Please remember that you can only use following defined functions
{    
    "add_task": {
        "Type": "function",
        "Description": "Controls the pouring action for from a specific container to another.",
        "Input": "A string representing the name of the Controller,a string representing the type of controller,a dict representing the params tamplate of the controller ,",
        "Output": "None",
        "Related functions": [
            "PickMoveController",
            "ReturnController"
        ],
        "Example": {
            "controller_name": "'pour_controller'",
            "controller_type": "pour_controller",
            "param_template": "{
                "picking_position": lambda obs: obs["beaker1"]["position"],
                "target_position": lambda obs: obs["beaker1"]["Pour_Position"],
                "current_joint_positions": lambda obs: Franka.get_joint_positions()}"
        },
        "Code": {    
            controller_manager.add_task('controller',"pick", {
                "picking_position": lambda obs: obs["beaker1"]["position"],
                "target_position": lambda obs: obs["beaker1"]["Pour_Position"],
                "current_joint_positions": lambda obs: Franka.get_joint_positions()
            })
            controller_manager.add_task('pour_controller',"pour", {
                'franka_art_controller': lambda obs: Franka.get_articulation_controller(), 
                "current_joint_positions": lambda obs: Franka.get_joint_positions(),
                'current_joint_velocities': lambda obs: Franka.get_joint_velocities(),
                'pour_speed': 55 / 180.0 * np.pi
            })
            controller_manager.add_task('return_controller',"return", {
                "pour_position": lambda obs: obs["beaker1"]["Pour_Position"],
                "return_position": lambda obs: np.array(obs["beaker1"]["Return_Position"]),
                "current_joint_positions": lambda obs: Franka.get_joint_positions()
            })
        }
    }
}

Please remember the param_template of each controller:
{
   "PourController": {
        "Type": "function",
        "Description": "Controls the pouring action for from a specific container to another.",
        "Input": "A string representing the name of the PourController,a cspace_controller representing the controller used in the bottom layer, a gripper representing the using gripper,a Sim_Container representing the container performs a pouring action,a Sim_Container representing the poured container,",
        "Output": "None",
        "Related functions": [
            "PickMoveController",
            "ReturnController"
        ],
        "Example": {
            "name": "pour_controller",
            "cspace_controller": "RMPFlowController(name='pour_cspace_controller', robot_articulation=Franka)",
            "gripper": "Franka.gripper",
            "Sim_Container1": "Sim_Bottle1",
            "Sim_Container2": "Sim_Beaker1"
        },
        "Code": "pour_controller = PourController(name='pour_controller', cspace_controller=RMPFlowController(name='pour_cspace_controller', robot_articulation=Franka), gripper=Franka.gripper, Sim_Container1 = Sim_Bottle1, Sim_Container2 = Sim_Beaker1)"
    },

    "PickMoveController": {
        "Type": "function",
        "Description": "Controls to pick up a specified object and move it to a specific position.",
        "Input": "A string representing the name of the PickMoveController,a cspace_controller representing the controller used in the bottom layer, a gripper representing the using gripper,a float representing the controller speed(default to 1.5)",
        "Output": "None",
        "Related functions": [
            "PickMoveController",
            "ReturnController"
        ],
        "Example": {
            "name": "pickmove_controller",
            "cspace_controller": "RMPFlowController(name='pour_cspace_controller', robot_articulation=Franka)",
            "gripper": "Franka.gripper",
            "speed" = "1.5"
        },
        "Code": "controller1 = PickMoveController(
                                name="pickmove_controller",
                                cspace_controller=RMPFlowController(name="pickmove_cspace_controller1", robot_articulation=Franka),
                                gripper=Franka.gripper,
                                speed = 1.5)"
    }

    "ReturnController": {
        "Type": "function",
        "Description": "Controls the return to the specific position after pouring is complete",
        "Input": "Sim_Container1, Sim_Container2",
        "Output": "None",
        "Related functions": [
            "PickMoveController",
            "ReturnController"
        ],
        "Example": {
            "name": "pickmove_controller",
            "cspace_controller": "RMPFlowController(name='pour_cspace_controller', robot_articulation=Franka)",
            "gripper": "Franka.gripper",
            "speed" = "1.5"
        },
        "Code": "return_controller1 = ReturnController(
                            name="return_controller",
                            cspace_controller=RMPFlowController(name="return_cspace_controller1", robot_articulation=Franka),
                            gripper=Franka.gripper,
                            speed = 1.5)"
    }
}